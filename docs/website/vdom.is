_sync
  (_include "stdlib")

  (_def typeof @{ $return (typeof args[0]); }@ )

  (_def h (_fn (type props children) {
    (_def .props props)
    
    (_def t ( @{ 
      var type = args[0];
      if (type.startsWith('.')) $return (["div", type.split('.').slice(1).join(' ')]);
      else $return (type);
    }@ type ) )

    (_echo t (typeof t))

    (_if (== "object" (typeof t) )
      (_begin
        (_def .type "div")
        (_def .props.class t.1)
      )
      (_def .type t)
    )
    (_if children (_def .children children) NIL )
  } ) )


  (_def COMPONENTS {} )
  (_def PORT (_fn () (_stream (_fn (x) NIL) NIL ) ) )


  (_def vnode (_fn (node id) (_begin
    (_if id NIL (_def id ".") )
    (_def type node.type)
    (_if type
      (_begin
        (_def componentfn (_dot COMPONENTS type) )
        (_if componentfn
          (_begin
            (_def nd (componentfn node.props) )
            (_if node.props.id (vnode nd node.props.id) (vnode nd id) )
          )
          {
            (_def .type type)
            (_def .props node.props)
            (_if .props.id (_def .id .props.id) (_def .id id) )
            (_if node.children
              (_def .children (_map node.children (_fn (child index) 
                (vnode child (concat .id "." index) )
              ) ) )
              NIL  
            ) 
          }
        )
      )
      node
    )
  ) ) )


  
  ;(_def COMPONENTS.hello-component (_fn (props) (h "p" {} (_seq (concat "Hello " props.name " !") ) ) ) )
  ;(_echo (vnode (h "hello-component" {(_def .name "Ganesh")} ) "." ))


  (_def EVENTS {
    (_def init @{
      var capt = true;
      if (args[0] === "false") capt = false;
      //("keypress keydown keyup click dbclick scroll focus blur change search select submit input invalid drag dragenter dragleave dragover dragstart drop".split(" ")).forEach(function (e) {
      ("click keyup".split(" ")).forEach(function (e) {
                                                                                                                                                          document.body.addEventListener(e, function (ev) {$yield(ev); ev.stopPropagation();}, capt) ;                      
                                                                                                                                                        });
    }@ )

    (_def .event-stream (_stream init "true"))
    
    (_def listeners {} )
    (_def .listen (_fn (id event port)
        (_begin
          ;(@{ console.log(args[0]); }@ listeners)
          (_def (_dot listeners (concat id ":" event) ) port )
        )
    ) )
    (_def .mute (_fn (id event) (_def (concat id ":" event) NIL) ) )
    (_def .remove (_fn (id) ( @{
      var obj = args[0];
      var id = args[1];
      Object.keys(obj).forEach(function (name) {
        if (name.startsWith(id+'.') || name.startsWith(id+':')) obj[name] = undefined;
      });
    }@ listeners id ) ) )

    (_do (_on .event-stream 
      (_begin
        (_def e (_pull .event-stream))
        (_def port (_dot listeners (concat e.target.id ":" e.type ) ) )
        ;(_echo e.type e.target.id port)
        (_if port (_push port e) NIL)
      )
    ) )
  } )


  (_def update-fn-internal (_fx ( @{
    
    function isEventProp (name) { return /^on/.test(name); }
    function extractEventName (name) { return name.slice(2).toLowerCase(); }

    function isCustomProp (name) {
      if (name === "id") return true;
      if (isEventProp(name)) return true;
      return false;
    }
    
    
    
    function setBooleanProp ($target, name, value) {
      if (value) $target.setAttribute(name, value);
      $target[name] = value;
    }

    function setProp ($target, name, value) {
      if (isCustomProp(name)) return;
      else if (typeof value === 'boolean') setBooleanProp ($target, name, value);
      else $target.setAttribute (name, value);
    }

    function setProps ($target, props) {
      if (typeof props === 'object') Object.keys(props).forEach(function (name) {
        setProp($target, name, props[name]);
      });
    }

    function removeBooleanProp ($target, name) {
      $target.removeAttribute (name);
      $target[name] = false;
    }

    function removeProp ($target, name, value) {
      if (isCustomProp(name)) return;
      else if (typeof value === 'boolean') removeBooleanProp ($target, name);
      else $target.removeAttribute (name);
    }

    function updateProp ($target, name, newVal, oldVal) {
      if (!newVal) removeProp ($target, name, oldVal);
      else if (!oldval || newVal !== oldVal) setProp ($target, name, newVal);
      else return;
    }

    function updateProps ($target, newProps, oldProps) {
      if (!oldProps) oldProps = {};
      var props = Object.assign ({}, newProps, oldProps);
      Object.keys(props).forEach (function (name) {
        updateProp ($target, name, newProps[name], oldProps[name]);    
      });
    }


    function addEventListeners (id, props) {
      //console.log("HERE", patch);
      if (typeof props === 'object') Object.keys(props).forEach(function (name) {
        //console.log("Here", patch);
        if (isEventProp(name)) addPatch.push({id: id, type: extractEventName(name), port: props[name]});
        //console.log(id, props);
      });
    }



    function createElement (node) {
      if (typeof node === 'string') return document.createTextNode(node);
      var $el = document.createElement (node.type);
      $el.setAttribute("id", node.id);
      setProps ($el, node.props);

      //console.log(addPatch);

      addEventListeners(node.id, node.props);
      if (node.children) node.children.arr.map(createElement).forEach($el.appendChild.bind($el));
      return $el;
    }
    
    function changed (node1, node2) {
      return typeof node1 !== typeof node2 
        || typeof node1 === 'string' && node1 !== node2 
        || node1.type !== node2.type 
        || node1.id !== node2.id;
    }

    function Patch () {
      this.arr = [];
      this.push = function (x) {this.arr.push(x); }.bind(this);
    }

    var addPatch = [];
    var removePatch = [];

    function updateElement ($par, newNode, oldNode, index=0) {
      if (!oldNode) {
        //console.log(addPatches);
        $par.appendChild (createElement (newNode));
        //console.log(addPatches);
      }
      else if (!newNode) {
        removePatch.push(oldNode.id);
        $par.removeChild($par.childNodes[index]);
      }
      else if (changed(newNode, oldNode)) {
        removePatch.push(oldNode.id);
        $par.replaceChild(createElement(newNode), $par.childNodes[index]);
      }
      else if (newNode.type) {
        updateProps($par.childNodes[index], newNode.props, oldNode.props);
        var newLen = newNode.children.arr.length;
        var oldLen = oldNode.children.arr.length;

        for (var i=0; i<newLen || i<oldLen; i++) {
          //console.log(addPatches, removePatches, "\n\n");
          updateElement ($par.childNodes[index], newNode.children.arr[i], oldNode.children.arr[i], i);
        }
      }
    }

    function update (id, newNode, oldNode) {
      var $par = document.getElementById (id);
      addPatch = [];
      removePatch = [];
      updateElement ($par, newNode, oldNode);
      return {add:addPatch, remove:removePatch};
    } 
    $return (update);
  }@ ) ) )

  
  (_def update (_fn (id newNode oldNode) 
    (_begin
      (_def patches (update-fn-internal id (vnode newNode) (vnode oldNode) ) )
      ;(@{ console.log(args[0]); }@ patches)
      (_map patches.remove (_fn (item) (EVENTS.remove item) ) )
      (_map patches.add (_fn (item) (EVENTS.listen item.id item.type item.port) ) )
    )
  ) )




















