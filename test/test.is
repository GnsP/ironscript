; Copyright (c) 2016, Ganesh Prasad Sahoo <sir.gnsp@gmail.com>
 
; Testing whether the Ironscript implementation is working OK or not.
; This is a comment. And all comments should be ignored.
; PS Comments start with ';' and end with the newline.




_begin
  

  ( @{
    console.log(vdom);  
  }@ )

  

  (_include "stdlib")

  
  
  (_def a 1) 
  (_echo a) 
  (_echo (+ a a))

  
  (_def twice (_fn (n) (+ n n)))
  (_echo (twice (+ 1 3)))

  
  
  (_def ! (_fn (n) 
    (_if (== n 0) 1 (* n (! (- n 1) ) ) ) 
  ))

  (_rho '(@a + @b) (+ @a @b))
  (_rho '(@a + @b + @c) (+ [@a + @b] @c))
  
  (_self 1 + 2 + 3)
  (_echo (! 5))

  (_rho '(@n !) (! @n) )
  (_echo [5 !])




  (_rho '(say hello to @name) (_echo (concat "Hello " @name "! Have a nice day.")))
  (_rho '(say bye to @name) (_echo (concat "Well " @name ", I got to go. Bye.")))
  
  (_def me "GNSP@GNEOS")

  [say hello to me]
  [say bye to me]




  (_rho '(@a should be @b) (_echo (concat @a " should be " @b " : " (_if (== @a @b) "passed" "failed" ) ) ) )

  [(+ 1 2) should be 3]
  [[5 !] should be 120]
  [(twice 8) should be 16]
  [(twice 4) should be 3]





  (_def multMod (_eval
    @[
      _begin
        (_rho '(@a * @b) (* @a @b))
        (_def myFunc (_fn (x) (_echo x)))
    ]@
  ))
  (_echo (multMod 2 * 3))




  (_import "./test1.is" _all)
  (_echo name)
  (_echo '( (IronScript is) quite ready))

  



  (_include "./testInclude.is")
  [does the include work ?]



  (@{ $scope.defc('testKey', 'Testing const interopTable'); }@)
  (@{ console.log($scope.getc('testKey')); }@)




  (_def myColl {
    (_let .name "Ganesh")
    (_let .roll "112CS0558")
  })

  (_echo myColl.name myColl.roll)
  (_def myColl.name "Ganesh Prasad")
  (_def myColl.contacts (_seq "9668588771" "9040117018"))

  (_echo myColl.name myColl.contacts.1)


  

  (_def clock {
    (_def seconds @{
      let s = args[0] || 1;
      let i = 1;
      let inter = setInterval (() => { $yield(i++); }, s*1000);
    }@)

    (_def .seconds-stream (_stream seconds 1))
  })


  ;(_echo (clock.seconds-stream))
  ;(_do (_on clock.seconds-stream (_echo (_pull clock.seconds-stream) ) ) )









  (_def natstream @{ 
    let i = 1;
    setInterval (() => { $yield(i++); }, 1000);
   }@
  )
  
  (_def twiceNums (_stream * 2 (natstream)))
  (_def echoStream (_fn (stream) (_stream _echo (stream) ) ) )
  (_do (echoStream clock.seconds-stream))

